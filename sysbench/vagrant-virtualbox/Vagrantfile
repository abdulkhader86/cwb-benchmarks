# -*- mode: ruby -*-
# vi: set ft=ruby :

def ubuntu_box(config, version)
  config.vm.box = "opscode-ubuntu-#{version}" 
  config.vm.box_url = "http://opscode-vm-bento.s3.amazonaws.com/vagrant/virtualbox/opscode_ubuntu-#{version}_chef-provisionerless.box"
end

VAGRANTFILE_API_VERSION = '2'
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # Box
  ubuntu_box(config, '14.04')
  
  if Vagrant.has_plugin?("vagrant-cachier")
    config.cache.scope       = :box
    config.cache.auto_detect = true
  end

  # VM
  config.vm.hostname = 'sysbench-virtualbox'
  
  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  config.vm.provider 'virtualbox' do |vb|
    # Don't boot with headless mode
    #vb.gui = true
    
    # Use VBoxManage to customize the VM. For example to change memory:
    vb.customize ['modifyvm', :id, '--memory', '1024']
  end

  #vagrant omnibus plugin that installs Chef with a bundled Ruby: https://github.com/schisamo/vagrant-omnibus
  config.omnibus.chef_version = :latest

  config.vm.provision 'chef_solo' do |chef|
    chef.log_level = :info
    # Put the client.rb in /etc/chef such that the chef-client can be run via "sudo chef-client" without specifying the path
    chef.provisioning_path = "/etc/chef"
    chef.cookbooks_path = "../.."
    chef.data_bags_path = "./data_bags"

    # Add required recipes to run_list
    chef.add_recipe 'benchmark'
    chef.add_recipe 'sysbench'
    
    chef.json =
    {
      "benchmark" => {
        "owner" => "vagrant",
        "group" => "vagrant"
      },
      "sysbench" => {
        "cli_options" => {
          "test" => "cpu",
          "cpu-max-prime" => "10000",
        }
      }
    }
  end
end
