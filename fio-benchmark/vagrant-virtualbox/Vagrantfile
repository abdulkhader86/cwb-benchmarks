# -*- mode: ruby -*-
# vi: set ft=ruby :
require 'chef'

def ubuntu_box(config, version)
  config.vm.box = "opscode-ubuntu-#{version}" 
  config.vm.box_url = "http://opscode-vm-bento.s3.amazonaws.com/vagrant/virtualbox/opscode_ubuntu-#{version}_chef-provisionerless.box"
end

Chef::Config.from_file(File.join(ENV['HOME'], '.chef', 'knife.rb'))
VAGRANTFILE_API_VERSION = '2'
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # Box
  ubuntu_box(config, '14.04')
  
  if Vagrant.has_plugin?("vagrant-cachier")
    config.cache.scope       = :box
    config.cache.auto_detect = true
  end

  # VM
  config.vm.hostname = 'fio-benchmark-virtualbox'
  
  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  config.vm.provider 'virtualbox' do |vb|
    # Don't boot with headless mode
    #vb.gui = true
    
    # Use VBoxManage to customize the VM. For example to change memory:
    vb.customize ['modifyvm', :id, '--memory', '800']
  end

  # Add chef-server domain name to hosts file
#  config.vm.provision :shell, :inline =>
#   "# Check to ensure idempotence.
#    if [ ! -f \"/var/vagrant_provision\" ]; then
#      # Actual commands
#      sudo echo \"#{Chef::Config[:chef_server_url]}  chef-server\" >> /etc/hosts
#      sudo echo \"#{Chef::Config[:chef_server_url]}  chef.seal.uzh.ch\" >> /etc/hosts
#    fi
#    touch /var/vagrant_provision # Create file to ensure idempotence"

  #vagrant omnibus plugin that installs Chef with a bundled Ruby: https://github.com/schisamo/vagrant-omnibus
  config.omnibus.chef_version = :latest

  # Chef client provisioning (requires Chef server) to install benchmark cookbooks
  config.vm.provision 'chef_client' do |chef|
    chef.log_level = :info
    # Put the client.rb in /etc/chef such that the chef-client can be run via "sudo chef-client" without specifying the path
    chef.provisioning_path = "/etc/chef"
    chef.chef_server_url = Chef::Config[:chef_server_url]
    chef.validation_key_path = Chef::Config[:validation_key]
    
    # MUST be unique in scope of all Chef server nodes
    chef.node_name = "#{config.vm.hostname}"
    
    # Add required recipes to run_list
    chef.add_recipe 'benchmark'
    chef.add_recipe 'fio-benchmark'
    
    chef.json =
    {
      "benchmark" => {
        "owner" => "vagrant",
        "group" => "vagrant"
      },
      "fio" => {
        "metric_definition_id" => "seq. write",
        "config" => {
          "size" => "10m",
          "refill_buffers" => "1"
        }
      }
    }
    
    # Cleanup when vm gets destroyed: Does not work due to bug https://github.com/mitchellh/vagrant/issues/2476
    #chef.delete_node = true
    #chef.delete_client = true
  end
end
